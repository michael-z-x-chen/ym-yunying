package com.hmn.ym.manager.utils;

import com.alibaba.fastjson.JSON;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;
import java.util.Map;

public class JsonUtil {
    private static final Logger logger = LoggerFactory.getLogger(JsonUtil.class);
    private static final String ENCODING_PREFIX = "encoding";
    private static final String NOCACHE_PREFIX = "no-cache";
    private static final String ENCODING_DEFAULT = "UTF-8";
    private static final boolean NOCACHE_DEFAULT = true;

    /**
     * 直接输出内容的简便函数.
     */
    public static void render(HttpServletResponse response, final String contentType, final String content,
                              final String... headers) {
        try {
            // 分析headers参数
            String encoding = ENCODING_DEFAULT;
            boolean noCache = NOCACHE_DEFAULT;
            for (String header : headers) {
                String headerName = StringUtils.substringBefore(header, ":");
                String headerValue = StringUtils.substringAfter(header, ":");

                if (StringUtils.equalsIgnoreCase(headerName, ENCODING_PREFIX)) {
                    encoding = headerValue;
                } else if (StringUtils.equalsIgnoreCase(headerName, NOCACHE_PREFIX)) {
                    noCache = Boolean.parseBoolean(headerValue);
                } else {
                    throw new IllegalArgumentException(headerName + "不是一个合法的header类型");
                }
            }
            // 设置headers参数
            String fullContentType = contentType + ";charset=" + encoding;
            response.setContentType(fullContentType);
            if (noCache) {
                response.setHeader("Pragma", "No-cache");
                response.setHeader("Cache-Control", "no-cache");
                response.setDateHeader("Expires", 0);
            }
            response.getWriter().write(content);
            response.getWriter().flush();

        } catch (IOException e) {
            logger.error(e.getMessage(), e);
        }
    }

    /**
     * 直接输出文本.
     */
    public static void renderText(HttpServletResponse response, final String text, final String... headers) {
        render(response, "text/plain", text, headers);
    }

    /**
     * 直接输出HTML.
     */
    public static void renderHtml(HttpServletResponse response, final String html, final String... headers) {
        render(response, "text/html", html, headers);
    }

    /**
     * 直接输出XML.
     */
    public static void renderXml(HttpServletResponse response, final String xml, final String... headers) {
        render(response, "text/xml", xml, headers);
    }

    /**
     * 直接输出JSON格式
     *
     * @param string json字符串.
     */
    public static void renderJson(HttpServletResponse response, final String string, final String... headers) {
        render(response, "application/json", string, headers);
    }

    /**
     * 直接输出JSON.
     * <p>
     * 将Map对象,将被转化为json字符串.
     */
    @SuppressWarnings("rawtypes")
    public static void renderJson(HttpServletResponse response, final Map map, final String... headers) {
        renderJson(response, JSON.toJSONString(map), headers);
    }

    /**
     * 直接输出JSON. Java对象,将被转化为json字符串.
     */
    public static void renderJson(HttpServletResponse response, final Object object, final String... headers) {
        renderJson(response, JSON.toJSONString(object), headers);
    }

    /**
     * json字符串转换对象
     *
     * @param jsonStr
     * @param clazz
     * @return
     */
    @SuppressWarnings({"rawtypes", "deprecation"})
    public static Object toObject(String jsonStr, Class clazz) {
        /*List objList = JSONArray.toList(JSONArray.fromObject(jsonStr), clazz);
        if (objList.size() > 0) {
            return objList.get(0);
        } else {*/
        return null;
        /*}*/
    }

    /**
     * list 输出json 2013-12-12 cjx
     */
    @SuppressWarnings("rawtypes")
    public static void renderJson(HttpServletResponse response, final List object, final String... headers) {
        //JSONArray json = JSONArray.fromObject(object);
        //   renderJson(response, json.toString(), headers);
    }

    /**
     * 输出dwz结果 2013-12-12 cjx
     */
    public static void renderDwzResult(HttpServletResponse response, boolean succ, String message) {
        renderDwzResult(response, succ, message, null);
    }

    /**
     * 输出dwz结果 2013-12-12 cjx
     */
    public static void renderDwzResult(HttpServletResponse response, boolean succ, String message, String callback) {
        DwzResult res = new DwzResult();
        if (succ) {
            res.setStatusCode(DwzResult.SUCCESS);
        } else {
            res.setStatusCode(DwzResult.FAILD);
        }
        res.setMessage(message);
        res.setCallbackType(callback);
        renderJson(response, res);
    }

    /**
     * 输出dwz结果 2013-12-12 cjx
     */
    public static void renderDwzResults(HttpServletResponse response, boolean succ, String callback, String navTabId) {
        DwzResult res = new DwzResult();
        if (succ) {
            res.setStatusCode(DwzResult.SUCCESS);
            res.setMessage("操作成功");
        } else {
            res.setStatusCode(DwzResult.FAILD);
            res.setMessage("操作失败");
        }
        res.setCallbackType(callback);
        res.setNavTabId(navTabId);
        renderJson(response, res);
    }

    /**
     * 输出dwz结果 2013-12-12 cjx
     */
    public static void renderDwzResult(HttpServletResponse response, boolean succ, String message, String callback, Object navTabId) {
        DwzResult res = new DwzResult();
        if (succ) {
            res.setStatusCode(DwzResult.SUCCESS);
        } else {
            res.setStatusCode(DwzResult.FAILD);
        }
        res.setMessage(message);
        res.setCallbackType(callback);
        res.setNavTabId(navTabId.toString());
        renderJson(response, res);
    }

    /**
     * 输出dwz结果 2013-12-12 cjx
     */
    public static void renderDwzResult(HttpServletResponse response, boolean succ, String message, String callback, String navTabId, String forwardUrl) {
        DwzResult res = new DwzResult();
        if (succ) {
            res.setStatusCode(DwzResult.SUCCESS);
        } else {
            res.setStatusCode(DwzResult.FAILD);
        }
        res.setMessage(message);
        res.setCallbackType(callback);
        res.setNavTabId(navTabId);
        res.setForwardUrl(forwardUrl);

        renderJson(response, res);
    }

    public static void renderJsonResult(HttpServletResponse response, String code, String message) {
        JsonResult rest = new JsonResult(code, message);

        renderJson(response, rest);
    }

}
