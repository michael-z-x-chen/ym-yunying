package com.hmn.ym.manager.utils;

import org.springframework.beans.factory.DisposableBean;
import org.springframework.stereotype.Component;

import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

/**
 * 异步线程池
 *
 * @author xfz
 */
@Component
public class AsyncThreadPool implements DisposableBean {
    private static final int POOL_SIZE = 1;
    private static final int MAX_POOL_SIZE = 2;
    private static final long KEEP_ALIVE_TIME = 0;

    private static class SingletonInstance {
        private static final ThreadPoolExecutor POOL = new ThreadPoolExecutor(POOL_SIZE, MAX_POOL_SIZE, KEEP_ALIVE_TIME, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>(),
                new DefaultThreadFactory("see-admin", true));
    }

    public ThreadFactory getThreadFactory() {
        return SingletonInstance.POOL.getThreadFactory();
    }

    @Override
    public void destroy() {
        if (!SingletonInstance.POOL.isShutdown()) {
            System.out.println("pool shutdown.....");
            SingletonInstance.POOL.shutdown();
        }
    }
}
