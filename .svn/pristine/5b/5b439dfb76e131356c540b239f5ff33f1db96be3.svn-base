package com.hmn.ym.manager.service.system.impl;

import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import com.google.common.collect.Lists;
import com.hmn.ym.dao.entities.po.system.Dict;
import com.hmn.ym.dao.entities.po.system.Menu;
import com.hmn.ym.dao.entities.po.system.RoleMenu;
import com.hmn.ym.dao.entities.vo.DataTablePage;
import com.hmn.ym.dao.entities.vo.system.MenuPageVo;
import com.hmn.ym.dao.entities.vo.system.MenuVo;
import com.hmn.ym.dao.entities.vo.system.TreeModel;
import com.hmn.ym.dao.mapper.system.DictMapper;
import com.hmn.ym.dao.mapper.system.MenuMapper;
import com.hmn.ym.dao.mapper.system.RoleMenuMapper;
import com.hmn.ym.manager.common.shiro.ShiroUtils;
import com.hmn.ym.manager.service.BaseServiceImpl;
import com.hmn.ym.manager.service.system.IMenuService;
import com.hmn.ym.manager.utils.TreeUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import tk.mybatis.mapper.entity.Example;

import java.util.Arrays;
import java.util.Date;
import java.util.List;

@Service
public class MenuServiceImpl extends BaseServiceImpl<Menu, MenuMapper> implements IMenuService {
    @Autowired
    private MenuMapper menuMapper;
    @Autowired
    private RoleMenuMapper roleMenuMapper;

    @Override
    public DataTablePage<MenuVo> page(MenuPageVo vo) {
        Example example = new Example(Menu.class);
        Example.Criteria ca = example.createCriteria();
        ca.andEqualTo("status", 1);
        if (vo.getParentId() != null) {
            ca.andEqualTo("parentId", vo.getParentId() == null ? 0 : vo.getParentId());
        }
        if (vo.getProjectId() != null) {
            ca.andEqualTo("projectId", vo.getProjectId());
        }
        example.orderBy("sort").asc();

        PageHelper.startPage(vo.getStart(), vo.getLength());
        Page<Menu> page = (Page<Menu>) menuMapper.selectByExample(example);
        List<MenuVo> list = Lists.newArrayList();
        for (Menu menu : page.getResult()) {
            MenuVo menuVo = new MenuVo();
            BeanUtils.copyProperties(menu, menuVo);
            if (menu.getParentId() != null) {
                Menu parentMenu = menuMapper.selectByPrimaryKey(menu.getParentId());
                if (parentMenu != null) {
                    menuVo.setParentName(parentMenu.getName());
                }
            }
            list.add(menuVo);
        }
        return new DataTablePage<MenuVo>(vo.getDraw(), (int) page.getTotal(), list);
    }

    @Override
    public List<TreeModel> tree(MenuPageVo vo) {
        Example example = new Example(Menu.class);
        Example.Criteria ca = example.createCriteria();
        ca.andEqualTo("status", 1);
        if (vo.getProjectId() != null) {
            ca.andIn("projectId", Arrays.asList(vo.getProjectId(), 0));
        }
        example.orderBy("sort").asc();
        List<Menu> list = menuMapper.selectByExample(example);
        List<TreeModel> treeModels = Lists.newArrayList();
        for (Menu menu : list) {
            TreeModel tree = new TreeModel();
            tree.setId(menu.getId());
            tree.setName(menu.getName());
            tree.setPid(menu.getParentId());
            tree.setUrl(menu.getAction());

            treeModels.add(tree);
        }
        return TreeUtils.convertTree(treeModels, 0);
    }

    @Override
    public List<Menu> listByProjectId(Integer projectId) {
        Example example = new Example(Menu.class);
        example.createCriteria().andEqualTo("status", 1).andEqualTo("projectId", projectId);
        return menuMapper.selectByExample(example);
    }

    @Override
    public Menu getById(Integer id) {
        return menuMapper.selectByPrimaryKey(id);
    }

    @Transactional
    @Override
    public void save(MenuVo vo) {
        if (vo.getId() != null) {
            Menu menu = new Menu();
            BeanUtils.copyProperties(vo, menu);

            menuMapper.updateByPrimaryKeySelective(menu);
        } else {
            Menu menu = new Menu();
            BeanUtils.copyProperties(vo, menu);
            if (vo.getParentId() == null) {
                menu.setParentId(1);
            }
            menu.setCreateId(ShiroUtils.getUserId());
            menu.setCreateTime(new Date());

            menuMapper.insertSelective(menu);
        }
    }

    @Transactional
    @Override
    public void delete(Integer id) {
        //删除菜单
        menuMapper.deleteByPrimaryKey(id);

        //角色菜单
        Example example = new Example(RoleMenu.class);
        example.createCriteria().andEqualTo("menuId", id);
        roleMenuMapper.deleteByExample(example);
    }

    @Override
    public List<MenuVo> listByUserId(Integer userId, Integer projectId) {
        List<MenuVo> list = menuMapper.selectByUserId(userId, projectId);

        List<MenuVo> dataList = TreeUtils.convertMenuTree(list, 1);

        return dataList;
    }

    @Override
    public List<MenuVo> getByUserId(Integer userId, Integer projectId) {
        return menuMapper.selectByUserId(userId, projectId);
    }
}
