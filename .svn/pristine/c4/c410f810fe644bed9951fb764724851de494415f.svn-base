package com.hmn.ym.manager.web.view;

import com.alibaba.fastjson.JSON;
import com.hmn.ym.common.annotation.NeedSecurity;
import com.hmn.ym.common.model.BaseResp;
import com.hmn.ym.common.utils.Assert;
import com.hmn.ym.common.utils.RespUtils;
import com.hmn.ym.dao.entities.vo.LoginVo;
import com.hmn.ym.dao.entities.vo.ShiroUser;
import org.apache.shiro.SecurityUtils;
import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.IncorrectCredentialsException;
import org.apache.shiro.authc.UsernamePasswordToken;
import org.apache.shiro.subject.Subject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.servlet.http.HttpServletRequest;
import java.util.Enumeration;

/**
 * 用户登录
 *
 * @author xufz
 */
@Controller("/")
public class LoginController {
    private static final Logger logger = LoggerFactory.getLogger(LoginController.class);

    @GetMapping("/login")
    public String login() {
        if (SecurityUtils.getSubject().getPrincipal() == null || !(SecurityUtils.getSubject().getPrincipal() instanceof ShiroUser)) {
            return "login";
        }
        ShiroUser currentUser = (ShiroUser) SecurityUtils.getSubject().getPrincipal();
        if (currentUser != null && currentUser.getId() != null && currentUser.getId() > 0) {
            return "redirect:/";
        }
        return "login";
    }

    @PostMapping("/login")
    @ResponseBody
    public BaseResp login(final LoginVo param) {
        BaseResp resp = RespUtils.success(BaseResp.class);
        try {
            Assert.isNotBlank(param.getUserName(), "请输入用户名");
            Assert.isNotBlank(param.getPassword(), "请输入密码");
            logger.info("后台用户登录,请求参数={}", JSON.toJSONString(param));

            Subject subject = SecurityUtils.getSubject();
            UsernamePasswordToken token = new UsernamePasswordToken();
            token.setUsername(param.getUserName());
            token.setPassword(param.getPassword().toCharArray());
            token.setRememberMe(true);
            subject.login(token);
        } catch (Exception e) {
            logger.error("后台登录失败:" + e.getMessage(), e);
            resp.setStatus(-9999);
            if (e instanceof IncorrectCredentialsException) {
                resp.setMessage("请检查你的账号或密码是否正确");
            } else if (e instanceof AuthenticationException) {
                Throwable t = e.getCause();
                if (t instanceof RuntimeException) {
                    resp.setMessage(t.getMessage());
                } else {
                    resp.setMessage(e.getMessage());
                }
            } else {
                resp.setMessage("系统异常：" + e.getMessage());
            }
        }
        return resp;
    }

    @RequestMapping(value = "/logout")
    @NeedSecurity
    public String logout(HttpServletRequest req) {
        for (Enumeration<?> attribute = req.getAttributeNames(); attribute.hasMoreElements(); ) {
            req.getSession().removeAttribute((String) attribute.nextElement());
        }
        req.getSession(false).invalidate();

        return "redirect:login.html";
    }
}
